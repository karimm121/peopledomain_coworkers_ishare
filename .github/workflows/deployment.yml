name: CFs Deployment

on:
  pull_request:
    # For the develop branch, trigger on PR creation and update, but NOT on close
    types: [opened, synchronize]
    branches:
      - develop  # Trigger on develop PRs

  # For test and main branches, trigger only when PR is merged (push event)
  push:
    branches:
      - test
      - main

permissions:
  contents: read

jobs:
  init:
    name: Initialize Environment
    runs-on: ubuntu-latest
    outputs:
      workflow_env: ${{ steps.set_environment.outputs.workflow_env }}
    steps:
      - id: 'set_environment'
        name: Set Environment
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, set the environment based on the base branch (the target branch)
            if [[ "${{ github.base_ref }}" == "main" || "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "workflow_env=main" >> $GITHUB_OUTPUT;
            elif [[ "${{ github.base_ref }}" == "test" || "${{ github.ref }}" == "refs/heads/test" ]]; then
              echo "workflow_env=test" >> $GITHUB_OUTPUT;
            elif [[ "${{ github.base_ref }}" == "develop" || "${{ github.ref }}" == "refs/heads/develop" ]]; then
              echo "workflow_env=develop" >> $GITHUB_OUTPUT;
            else
              echo "workflow_env=dev" >> $GITHUB_OUTPUT;
            fi;
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # For pushes (after PR merge), use github.ref to determine the branch
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "workflow_env=main" >> $GITHUB_OUTPUT;
            elif [[ "${{ github.ref }}" == "refs/heads/test" ]]; then
              echo "workflow_env=test" >> $GITHUB_OUTPUT;
            elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
              echo "workflow_env=develop" >> $GITHUB_OUTPUT;
            else
              echo "workflow_env=dev" >> $GITHUB_OUTPUT;
            fi;
          fi;

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          pwd
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          cd tests
          for dir in */; do
            echo "Running tests in $dir"
            pytest "$dir"  # Run pytest in each subdirectory
          done

  cloud_functions_deploy:
    name: Deploy Google Cloud Functions
    runs-on: ubuntu-latest
    needs: init
    environment: ${{ needs.init.outputs.workflow_env }}
    permissions:
      contents: "read"
      id-token: "write"
    # For develop: Trigger on PR creation and update (NOT closed)
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.state != 'closed' && github.event.pull_request.base.ref == 'develop') ||
      (github.event_name == 'push' && (
        github.ref == 'refs/heads/test' || github.ref == 'refs/heads/main'
      ))

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
           fetch-depth: 0

      - name: Branch name
        run: echo "running on branch ${{ github.ref }}"

      - name: Get changed files
        id: modified-files
        uses: tj-actions/changed-files@v46.0.1

      - name: List modified files excluding tests
        run: |
          echo "Modified files (excluding tests):"
          filtered_files=""
          for file in ${{ steps.modified-files.outputs.all_modified_files }}; do
            if [[ ! "$file" == tests/* ]]; then
              filtered_files+="$file"$'\n'
              echo "$file"
            fi
          done
          echo "filtered_files_without_tests=${filtered_files//$'\n'/,}" >> $GITHUB_ENV

      - name: Set deployment environment status
        id: environment_check
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # PR event logic
            if [[ "${{ github.event.pull_request.base.ref }}" == "develop" ]]; then
              echo "PR is targeting the development environment"
              echo "environment=valid_deployment" >> $GITHUB_ENV  
            elif [[ "${{ github.event.pull_request.base.ref }}" == "test" && "${{ github.event.pull_request.head.ref }}" == "develop" ]]; then
              echo "PR is targeting the test environment and comes from develop"
              echo "environment=valid_deployment" >> $GITHUB_ENV
            elif [[ "${{ github.event.pull_request.base.ref }}" == "main" && "${{ github.event.pull_request.head.ref }}" == "test" ]]; then
              echo "PR is targeting the main environment and comes from test"
              echo "environment=valid_deployment" >> $GITHUB_ENV
            else
              echo "PR is targeting another environment"
              echo "environment=other" >> $GITHUB_ENV
            fi
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Push event logic (after PR merge)
            if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
              echo "Push to develop branch"
              echo "environment=valid_deployment" >> $GITHUB_ENV
            elif [[ "${{ github.ref }}" == "refs/heads/test" ]]; then
              echo "Push to test branch"
              # Only deploy if the PR was raised from develop to test
              if [[ "${{ github.event.pull_request.head.ref }}" == "develop" ]]; then
                echo "Deploying to test from develop"
                echo "environment=valid_deployment" >> $GITHUB_ENV
              else
                echo "Not deploying to test, the PR was not from develop"
                echo "environment=other" >> $GITHUB_ENV
              fi
            elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "Push to main branch"
              # Only deploy if the PR was raised from test to main
              if [[ "${{ github.event.pull_request.head.ref }}" == "test" ]]; then
                echo "Deploying to main from test"
                echo "environment=valid_deployment" >> $GITHUB_ENV
              else
                echo "Not deploying to main, the PR was not from test"
                echo "environment=other" >> $GITHUB_ENV
              fi
            else
              echo "Push to an unknown branch"
              echo "environment=other" >> $GITHUB_ENV
            fi
          fi

      - name: Echo Environment
        run: |
            environment_status="${{ env.environment }}"
            echo "Pull Request is targeting the $environment_status environment"

      - name: get-cowr-data-person-api-v0
        if: contains(env.filtered_files_without_tests, 'get-cowr-data-person-api-v0/') && (env.environment == 'valid_deployment')
        run: |
          echo "Deploying the functions get-cowr-data-person-api-v0"